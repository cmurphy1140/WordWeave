import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { PoemData } from '../types';
import { SaveIcon, ShareIcon, RefreshIcon, CopyIcon, DownloadIcon, HeartIcon, BookmarkIcon, CheckIcon } from './icons/MinimalistIcons';

interface PoemActionsProps {
  poemData: PoemData;
  onSave?: () => void;
  onShare?: () => void;
  onRegenerate?: () => void;
  className?: string;
}

interface ActionState {
  liked: boolean;
  bookmarked: boolean;
  copied: boolean;
  saved: boolean;
}

const PoemActions: React.FC<PoemActionsProps> = ({ 
  poemData, 
  onSave, 
  onShare, 
  onRegenerate,
  className = '' 
}) => {
  const [state, setState] = useState<ActionState>({
    liked: false,
    bookmarked: false,
    copied: false,
    saved: false
  });

  const [showShareDropdown, setShowShareDropdown] = useState(false);

  const updateState = (key: keyof ActionState, value: boolean) => {
    setState(prev => ({ ...prev, [key]: value }));
  };

  const handleSave = () => {
    if (onSave) {
      onSave();
    } else {
      // Default save to localStorage
      const savedPoems = JSON.parse(localStorage.getItem('savedPoems') || '[]');
      savedPoems.push({
        ...poemData,
        savedAt: new Date().toISOString()
      });
      localStorage.setItem('savedPoems', JSON.stringify(savedPoems));
    }
    updateState('saved', true);
    setTimeout(() => updateState('saved', false), 2000);
  };

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(poemData.poem);
      updateState('copied', true);
      setTimeout(() => updateState('copied', false), 2000);
    } catch (err) {
      console.error('Failed to copy poem:', err);
    }
  };

  const handleDownload = () => {
    const element = document.createElement('a');
    const file = new Blob([`${poemData.poem}\n\n---\nGenerated by WordWeave`], { 
      type: 'text/plain;charset=utf-8' 
    });
    element.href = URL.createObjectURL(file);
    element.download = `poem-${Date.now()}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    setShowShareDropdown(false);
  };

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: 'My Generated Poem',
        text: poemData.poem,
      });
    } else {
      setShowShareDropdown(!showShareDropdown);
    }
    if (onShare) onShare();
  };

  const handleLike = () => {
    updateState('liked', !state.liked);
  };

  const handleBookmark = () => {
    updateState('bookmarked', !state.bookmarked);
  };

  const actionButtons = [
    {
      id: 'like',
      icon: HeartIcon,
      label: 'Like',
      onClick: handleLike,
      isActive: state.liked,
      variant: 'ghost' as const,
      showLabel: false
    },
    {
      id: 'bookmark', 
      icon: BookmarkIcon,
      label: 'Bookmark',
      onClick: handleBookmark,
      isActive: state.bookmarked,
      variant: 'ghost' as const,
      showLabel: false
    },
    {
      id: 'copy',
      icon: state.copied ? CheckIcon : CopyIcon,
      label: state.copied ? 'Copied!' : 'Copy',
      onClick: handleCopy,
      isActive: state.copied,
      variant: 'secondary' as const,
      showLabel: true
    },
    {
      id: 'save',
      icon: state.saved ? CheckIcon : SaveIcon,
      label: state.saved ? 'Saved!' : 'Save',
      onClick: handleSave,
      isActive: state.saved,
      variant: 'primary' as const,
      showLabel: true
    },
    {
      id: 'share',
      icon: ShareIcon,
      label: 'Share',
      onClick: handleShare,
      isActive: showShareDropdown,
      variant: 'secondary' as const,
      showLabel: true
    },
    {
      id: 'regenerate',
      icon: RefreshIcon,
      label: 'Regenerate',
      onClick: onRegenerate || (() => {}),
      isActive: false,
      variant: 'secondary' as const,
      showLabel: true
    }
  ];

  return (
    <motion.div
      className={`poem-actions ${className}`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.6, duration: 0.5, ease: 'easeOut' }}
      style={{
        position: 'relative',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        gap: 'var(--space-3)',
        padding: 'var(--space-6) 0',
        marginTop: 'var(--space-8)',
        borderTop: '1px solid var(--border-light)',
        flexWrap: 'wrap'
      }}
    >
      {actionButtons.map((button, index) => {
        const IconComponent = button.icon;
        const isLikeButton = button.id === 'like';
        const isBookmarkButton = button.id === 'bookmark';
        
        return (
          <motion.button
            key={button.id}
            className={`btn ${button.variant} ${button.isActive ? 'active' : ''}`}
            onClick={button.onClick}
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ 
              delay: 0.7 + (index * 0.1), 
              duration: 0.3,
              type: 'spring',
              stiffness: 300,
              damping: 20
            }}
            whileHover={{ 
              scale: 1.02,
              y: -1
            }}
            whileTap={{ scale: 0.98 }}
            style={{
              position: 'relative',
              minHeight: '44px',
              ...(button.variant === 'ghost' ? {
                background: 'transparent',
                border: 'none',
                padding: 'var(--space-2)',
                borderRadius: 'var(--radius-full)',
                color: button.isActive ? 
                  (isLikeButton ? '#ef4444' : isBookmarkButton ? '#3b82f6' : 'var(--color-primary-600)') 
                  : 'var(--text-tertiary)'
              } : {}),
              ...(button.variant === 'primary' && button.isActive ? {
                background: 'linear-gradient(135deg, var(--color-success), #059669)',
                color: 'white'
              } : {}),
              ...(button.variant === 'secondary' && button.isActive ? {
                background: 'var(--color-primary-50)',
                color: 'var(--color-primary-700)',
                borderColor: 'var(--color-primary-200)'
              } : {})
            }}
            aria-label={button.label}
          >
            <IconComponent 
              size={18} 
              filled={button.isActive && (isLikeButton || isBookmarkButton)}
            />
            {button.showLabel && (
              <span style={{ marginLeft: 'var(--space-2)' }}>
                {button.label}
              </span>
            )}
          </motion.button>
        );
      })}

      {/* Share Dropdown */}
      <AnimatePresence>
        {showShareDropdown && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95, y: 10 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: 10 }}
            transition={{ duration: 0.2, ease: 'easeOut' }}
            style={{
              position: 'absolute',
              top: '100%',
              right: '50%',
              transform: 'translateX(50%)',
              marginTop: 'var(--space-2)',
              zIndex: 'var(--z-dropdown)',
              minWidth: '200px'
            }}
          >
            <div 
              className="glass-card"
              style={{
                padding: 'var(--space-3)',
                display: 'flex',
                flexDirection: 'column',
                gap: 'var(--space-2)'
              }}
            >
              <button
                className="btn-ghost"
                onClick={handleCopy}
                style={{
                  justifyContent: 'flex-start',
                  padding: 'var(--space-2) var(--space-3)',
                  borderRadius: 'var(--radius-md)',
                  fontSize: 'var(--text-sm)'
                }}
              >
                <CopyIcon size={16} />
                Copy Text
              </button>
              
              <button
                className="btn-ghost"
                onClick={handleDownload}
                style={{
                  justifyContent: 'flex-start',
                  padding: 'var(--space-2) var(--space-3)',
                  borderRadius: 'var(--radius-md)',
                  fontSize: 'var(--text-sm)'
                }}
              >
                <DownloadIcon size={16} />
                Download as .txt
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Click outside to close dropdown */}
      {showShareDropdown && (
        <div
          style={{
            position: 'fixed',
            inset: 0,
            zIndex: 'var(--z-dropdown)',
            cursor: 'pointer'
          }}
          onClick={() => setShowShareDropdown(false)}
        />
      )}
    </motion.div>
  );
};

export default PoemActions;
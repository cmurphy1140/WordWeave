import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { PoemData, LoadingState } from '../types';

// SVG Icons
const SparklesIcon: React.FC<{ size?: number }> = ({ size = 20 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5">
    <path d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.894 20.567L16.5 21.75l-.394-1.183a2.25 2.25 0 00-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 001.423-1.423L16.5 15.75l.394 1.183a2.25 2.25 0 001.423 1.423L19.5 18.75l-1.183.394a2.25 2.25 0 00-1.423 1.423z"/>
  </svg>
);

const RefreshIcon: React.FC<{ size?: number }> = ({ size = 20 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <polyline points="23 4 23 10 17 10"/>
    <polyline points="1 20 1 14 7 14"/>
    <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
  </svg>
);

const DownloadIcon: React.FC<{ size?: number }> = ({ size = 20 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
    <polyline points="7 10 12 15 17 10"/>
    <line x1="12" y1="15" x2="12" y2="3"/>
  </svg>
);

const ShareIcon: React.FC<{ size?: number }> = ({ size = 20 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <circle cx="18" cy="5" r="3"/>
    <circle cx="6" cy="12" r="3"/>
    <circle cx="18" cy="19" r="3"/>
    <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"/>
    <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"/>
  </svg>
);

const PaletteIcon: React.FC<{ size?: number }> = ({ size = 20 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <circle cx="13.5" cy="6.5" r=".5"/>
    <circle cx="17.5" cy="10.5" r=".5"/>
    <circle cx="8.5" cy="7.5" r=".5"/>
    <circle cx="6.5" cy="11.5" r=".5"/>
    <circle cx="12.5" cy="16.5" r=".5"/>
    <path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z"/>
  </svg>
);

interface LearningCurvePoemDisplayProps {
  poemData: PoemData;
  loading: LoadingState;
  onNewPoem: () => void;
}

const LearningCurvePoemDisplay: React.FC<LearningCurvePoemDisplayProps> = ({
  poemData,
  loading,
  onNewPoem
}) => {
  const [showThemeDetails, setShowThemeDetails] = useState(false);
  const [animationComplete, setAnimationComplete] = useState(false);

  // Split poem into lines for staggered animation
  const poemLines = poemData.poem.split('\n').filter(line => line.trim());

  // Extract theme colors
  const themeColors = poemData.theme?.colors || {};
  const primaryColor = themeColors.primary || '#6b7280';
  const accentColor = themeColors.accent || '#d1d5db';
  
  // Convert gradient array to CSS gradient string
  const gradientColors = Array.isArray(themeColors.gradient) 
    ? `linear-gradient(135deg, ${themeColors.gradient.join(', ')})`
    : themeColors.gradient || 'linear-gradient(135deg, #f3f4f6, #e5e7eb)';

  // Handle poem download
  const handleDownload = () => {
    const content = [
      'WordWeave Poem',
      '='.repeat(15),
      '',
      poemData.poem,
      '',
      `Source Words: ${poemData.metadata?.words?.join(', ') || 'N/A'}`,
      `Created: ${new Date().toLocaleDateString()}`,
      '',
      'Generated by WordWeave AI'
    ].join('\n');

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `wordweave-poem-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Handle poem sharing
  const handleShare = async () => {
    const shareText = `${poemData.poem}\n\nâ€” Created with WordWeave AI`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: 'WordWeave Poem',
          text: shareText
        });
      } catch (error) {
        console.log('Share cancelled');
      }
    } else {
      // Fallback: Copy to clipboard
      try {
        await navigator.clipboard.writeText(shareText);
        // Could add a toast notification here
      } catch (error) {
        console.error('Failed to copy to clipboard');
      }
    }
  };

  useEffect(() => {
    const timer = setTimeout(() => {
      setAnimationComplete(true);
    }, poemLines.length * 150 + 500);

    return () => clearTimeout(timer);
  }, [poemLines.length]);

  return (
    <div className="poem-display-container">
      {/* Poem Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="poem-header"
      >
        <div className="poem-header-content">
          <div className="poem-icon" style={{ background: gradientColors }}>
            <SparklesIcon size={24} />
          </div>
          <div className="poem-title-section">
            <h2 className="poem-title">Your Poem</h2>
            <p className="poem-subtitle">
              Crafted from: {poemData.metadata?.words?.join(', ') || 'your inspiration'}
            </p>
          </div>
        </div>
      </motion.div>

      {/* Poem Content */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2 }}
        className="poem-content-card"
        style={{
          '--theme-primary': primaryColor,
          '--theme-accent': accentColor,
          '--theme-gradient': gradientColors
        } as React.CSSProperties}
      >
        <div className="poem-text-container">
          <AnimatePresence>
            {poemLines.map((line, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{
                  delay: index * 0.15,
                  duration: 0.4,
                  ease: "easeOut"
                }}
                className="poem-line"
              >
                {line}
              </motion.div>
            ))}
          </AnimatePresence>
        </div>

        {/* Theme Color Preview */}
        {animationComplete && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.3 }}
            className="theme-preview"
          >
            <button
              onClick={() => setShowThemeDetails(!showThemeDetails)}
              className="theme-toggle"
              aria-label="Toggle theme details"
            >
              <PaletteIcon size={16} />
              <span>Theme Colors</span>
            </button>

            <AnimatePresence>
              {showThemeDetails && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="theme-details"
                >
                  <div className="color-swatches">
                    {Object.entries(themeColors).map(([name, color]) => {
                      if (name === 'gradient') return null;
                      return (
                        <div key={name} className="color-swatch">
                          <div
                            className="color-circle"
                            style={{ backgroundColor: color as string }}
                          />
                          <span className="color-name">{name}</span>
                        </div>
                      );
                    })}
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        )}
      </motion.div>

      {/* Action Buttons */}
      {animationComplete && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="poem-actions"
        >
          <div className="action-buttons-primary">
            <button
              onClick={onNewPoem}
              className="btn btn-primary btn-lg"
            >
              <RefreshIcon size={18} />
              Create New Poem
            </button>
          </div>

          <div className="action-buttons-secondary">
            <button
              onClick={handleDownload}
              className="btn btn-secondary btn-icon"
              aria-label="Download poem"
            >
              <DownloadIcon size={18} />
            </button>

            <button
              onClick={handleShare}
              className="btn btn-secondary btn-icon"
              aria-label="Share poem"
            >
              <ShareIcon size={18} />
            </button>
          </div>
        </motion.div>
      )}

      {/* Metadata */}
      {poemData.metadata && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.7 }}
          className="poem-metadata"
        >
          <div className="metadata-item">
            <span className="metadata-label">Style</span>
            <span className="metadata-value">
              {poemData.metadata.style || 'Free Verse'}
            </span>
          </div>
          {poemData.metadata.mood && (
            <div className="metadata-item">
              <span className="metadata-label">Mood</span>
              <span className="metadata-value">{poemData.metadata.mood}</span>
            </div>
          )}
          <div className="metadata-item">
            <span className="metadata-label">Generated</span>
            <span className="metadata-value">
              {new Date().toLocaleDateString()}
            </span>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default LearningCurvePoemDisplay;